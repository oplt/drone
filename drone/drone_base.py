from abc import ABC, abstractmethod
from typing import Iterable, Optional
from core.models import Coordinate, Telemetry

class DroneClient(ABC):
    @abstractmethod
    def connect(self) -> None: ...
    @abstractmethod
    def arm_and_takeoff(self, alt: float) -> None: ...
    @abstractmethod
    def goto(self, coord: Coordinate) -> None: ...
    @abstractmethod
    def set_mode(self, mode: str) -> None: ...
    @abstractmethod
    def get_telemetry(self) -> Telemetry: ...
    @abstractmethod
    def follow_waypoints(self, path: Iterable[Coordinate]) -> None: ...
    @abstractmethod
    def land(self) -> None: ...
    @abstractmethod
    def close(self) -> None: ...
